// scriptsFolder/busqueda.js

import { buscarProductos } from './api/api_busqueda.js';
import { mostrarDetallesProducto } from './detallesProducto.js';

class BusquedaManager {
    constructor() {
        console.log('üîç BusquedaManager: Inicializando con integraci√≥n de detalles...');
        
        this.searchInput = document.querySelector('.busqueda input');
        this.resultsContainer = document.getElementById('searchResults');
        this.resultsList = this.resultsContainer?.querySelector('.resultados-container');
        this.debounceTimer = null;
        this.isSearching = false;
        this.productosEncontrados = []; // Para almacenar los productos encontrados
        
        console.log('üìç Elementos encontrados:', {
            searchInput: this.searchInput,
            resultsContainer: this.resultsContainer,
            resultsList: this.resultsList
        });
        
        this.init();
    }

    init() {
        if (!this.searchInput || !this.resultsContainer) {
            console.error('‚ùå ERROR: No se encontraron elementos de b√∫squeda');
            return;
        }

        console.log('‚úÖ Elementos de b√∫squeda encontrados correctamente');

        // Event listeners
        this.searchInput.addEventListener('input', (e) => {
            console.log('üìù INPUT EVENT DISPARADO - Valor:', e.target.value);
            e.stopPropagation();
            e.stopImmediatePropagation();
            this.handleInput(e);
        }, true);
        
        this.searchInput.addEventListener('keydown', (e) => {
            console.log('‚å®Ô∏è KEYDOWN EVENT DISPARADO - Tecla:', e.key);
            this.handleKeydown(e);
        });
        
        this.searchInput.addEventListener('focus', () => {
            console.log('üéØ FOCUS EVENT DISPARADO - Input enfocado');
            this.showResults();
        });
        
        document.addEventListener('click', (e) => this.handleClickOutside(e));
        this.resultsContainer.addEventListener('click', (e) => e.stopPropagation());
        
        console.log('‚úÖ Event listeners configurados con integraci√≥n de detalles');
    }

    handleInput(e) {
        const query = e.target.value.trim();
        console.log('üîç Handle input:', query);
        
        // Clear previous debounce timer
        if (this.debounceTimer) {
            clearTimeout(this.debounceTimer);
        }

        // Hide results if query is too short
        if (query.length < 2) {
            console.log('üìè Query muy corta, ocultando resultados');
            this.hideResults();
            return;
        }

        // Show loading state
        this.showLoading();
        console.log('‚è≥ Mostrando loading...');

        // Debounce search
        this.debounceTimer = setTimeout(() => {
            console.log('üöÄ Ejecutando b√∫squeda despu√©s de debounce:', query);
            this.performSearch(query);
        }, 300);
    }

    handleKeydown(e) {
        if (e.key === 'Enter') {
            console.log('‚Üµ ENTER presionado');
            e.preventDefault();
            this.performFinalSearch();
        } else if (e.key === 'Escape') {
            console.log('‚éã ESC presionado');
            this.hideResults();
        }
    }

    handleClickOutside(e) {
        if (!this.resultsContainer.contains(e.target) && e.target !== this.searchInput) {
            console.log('üëÜ Click fuera, ocultando resultados');
            this.hideResults();
        }
    }

    async performSearch(query) {
        if (this.isSearching) {
            console.log('‚è≥ Ya hay una b√∫squeda en curso, esperando...');
            return;
        }
        
        this.isSearching = true;
        console.log('üîç PerformSearch iniciado:', query);
        
        try {
            console.log('üåê Llamando a buscarProductos...');
            this.productosEncontrados = await buscarProductos(query);
            console.log('‚úÖ API respondi√≥:', this.productosEncontrados);
            this.displayResults(this.productosEncontrados, query);
        } catch (error) {
            console.error('‚ùå Error en performSearch:', error);
            this.displayError();
        } finally {
            this.isSearching = false;
            console.log('üîö PerformSearch finalizado');
        }
    }

    performFinalSearch() {
        const query = this.searchInput.value.trim();
        if (query.length >= 2) {
            console.log('üéØ B√∫squeda final con Enter:', query);
            // Redirigir a la p√°gina de productos con el t√©rmino de b√∫squeda
            window.location.href = `productos.html?busqueda=${encodeURIComponent(query)}`;
        }
    }

    displayResults(productos, query) {
        if (!this.resultsList) return;

        console.log('üé® Renderizando resultados con integraci√≥n de detalles:', productos);

        if (productos.length === 0) {
            this.resultsList.innerHTML = `
                <div class="sin-resultados">
                    <i class="fa-solid fa-search" style="font-size: 24px; margin-bottom: 10px; opacity: 0.5;"></i>
                    <p>No se encontraron productos para "${query}"</p>
                    <small>Intenta con otros t√©rminos de b√∫squeda</small>
                </div>
            `;
            console.log('üì≠ No hay resultados para mostrar');
            return;
        }

        this.resultsList.innerHTML = productos.slice(0, 8).map(producto => {
            // ‚úÖ CORRECCI√ìN: Manejar im√°genes que pueden ser null/undefined/array vac√≠o
            const imagenUrl = producto.imagenes?.[0]?.url || 
                             'https://via.placeholder.com/50?text=Sin+Imagen';
            
            return `
                <div class="resultado-item" data-product-id="${producto.id}">
                    <img src="${imagenUrl}" 
                         alt="${producto.nombre}" 
                         onerror="this.src='https://via.placeholder.com/50?text=Error'">
                    <div class="resultado-info">
                        <div class="resultado-nombre">${producto.nombre}</div>
                        <div class="resultado-precio">$${producto.precio.toLocaleString('es-AR')}</div>
                        <div class="resultado-stock ${producto.stock > 0 ? 'en-stock' : 'sin-stock'}">
                            ${producto.stock > 0 ? 'üü¢ En stock' : 'üî¥ Agotado'}
                        </div>
                    </div>
                    <button class="resultado-ver-detalles" data-product-id="${producto.id}">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                </div>
            `;
        }).join('');

        // Add click listeners to results
        this.resultsList.querySelectorAll('.resultado-item').forEach(item => {
            item.addEventListener('click', (e) => {
                // No hacer nada si se hace click en el bot√≥n de ver detalles
                if (!e.target.closest('.resultado-ver-detalles')) {
                    const productId = item.dataset.productId;
                    console.log('üñ±Ô∏è Click en resultado:', productId);
                    this.navigateToProduct(productId);
                }
            });
        });

        // Add click listeners to "Ver Detalles" buttons
        this.resultsList.querySelectorAll('.resultado-ver-detalles').forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                const productId = button.dataset.productId;
                console.log('üëÅÔ∏è Click en Ver Detalles desde b√∫squeda:', productId);
                this.mostrarDetallesDesdeBusqueda(productId);
            });
        });

        console.log('‚úÖ Resultados renderizados con botones de detalles');
    }

    // NUEVO M√âTODO: Mostrar detalles desde la b√∫squeda
    async mostrarDetallesDesdeBusqueda(productId) {
        console.log('üîç Mostrando detalles para producto ID desde b√∫squeda:', productId);
        
        try {
            // Buscar el producto en los resultados de b√∫squeda
            const producto = this.productosEncontrados.find(p => String(p.id) === String(productId));
            
            if (producto) {
                console.log('‚úÖ Producto encontrado en resultados de b√∫squeda:', producto.nombre);
                
                // Ocultar resultados de b√∫squeda
                this.hideResults();
                
                // Limpiar el input de b√∫squeda
                this.searchInput.value = '';
                
                // Mostrar el modal de detalles
                mostrarDetallesProducto(productId);
            } else {
                console.error('‚ùå Producto no encontrado en resultados de b√∫squeda');
                this.mostrarErrorTemporal('Producto no encontrado en los resultados');
            }
        } catch (error) {
            console.error('‚ùå Error al mostrar detalles desde b√∫squeda:', error);
            this.mostrarErrorTemporal('Error al cargar los detalles del producto');
        }
    }

    showLoading() {
        if (!this.resultsList) return;
        
        this.resultsList.innerHTML = `
            <div class="buscando">
                <div class="loading-spinner">
                    <i class="fa-solid fa-spinner fa-spin"></i>
                </div>
                <div>Buscando productos...</div>
            </div>
        `;
        this.showResults();
        console.log('‚è≥ Mostrando estado de carga');
    }

    displayError() {
        if (!this.resultsList) return;
        
        this.resultsList.innerHTML = `
            <div class="sin-resultados">
                <i class="fa-solid fa-exclamation-triangle" style="font-size: 24px; margin-bottom: 10px; color: #ff6b6b;"></i>
                <p>Error al buscar productos</p>
                <small>Intenta nuevamente en unos momentos</small>
            </div>
        `;
        console.log('‚ùå Mostrando error');
    }

    mostrarErrorTemporal(mensaje) {
        // Crear un toast de error temporal
        const toast = document.createElement('div');
        toast.className = 'toast-message';
        toast.textContent = mensaje;
        toast.style.background = '#ff4444';
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 3000);
    }

    showResults() {
        if (this.searchInput.value.trim().length >= 2) {
            this.resultsContainer.style.display = 'block';
            console.log('üëÅÔ∏è Mostrando contenedor de resultados');
        }
    }

    hideResults() {
        this.resultsContainer.style.display = 'none';
        console.log('üôà Ocultando contenedor de resultados');
    }

    navigateToProduct(productId) {
        console.log('üß≠ Navegar al producto:', productId);
        // Por ahora solo ocultamos los resultados y mostramos detalles
        this.hideResults();
        this.searchInput.value = '';
        mostrarDetallesProducto(productId);
    }
}

// Initialize search when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM cargado, inicializando b√∫squeda con integraci√≥n de detalles...');
    new BusquedaManager();
});

export default BusquedaManager;