spring.application.name=BackendE_Commerce

# ===============================
# LOGGING
# ===============================
logging.level.root=INFO
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#logging.file.name=logs/ecommerce.log

# ===============================
# JWT
# ===============================
# Secreto para firmar los tokens. Se recomienda usar una variable de entorno para producción.
# Si la variable de entorno JWT_SECRET no está definida, usa el valor por defecto que ya tenía tu equipo.
jwt.secret=${JWT_SECRET:mD#9F!x8P@3r$7kLqB1zT&hGvW*eYcR5nS0uJ^oM}
jwt.expiration=3600000 # Tiempo de expiracion del token en milisegundos (3600000ms = 1 hora).

# ===============================
# DATABASE (MySQL)
# ===============================
spring.datasource.url=jdbc:mysql://localhost:3306/base_datos_yacomo?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ===============================
# JPA / HIBERNATE
# ===============================
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# ===============================
# HIBERNATE ENVERS
# ===============================
spring.jpa.properties.org.hibernate.envers.audit_table_suffix=_AUD
spring.jpa.properties.org.hibernate.envers.revision_field_name=REV
spring.jpa.properties.org.hibernate.envers.revision_type_field_name=REVTYPE
spring.jpa.properties.org.hibernate.envers.store_data_at_delete=true

# ===============================
# Envio de Mail
# ===============================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=scriptgangecommerce@gmail.com
spring.mail.password=zuef oddu wyyi guun
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# ===============================
# MONGODB (Base de datos NoSQL adicional)
# ===============================
spring.data.mongodb.uri=mongodb://localhost:27017/ecommerce_mongo
spring.data.mongodb.database=ecommerce_mongo

# ===============================
# Configuracin de Cloudinary
# ===============================
cloudinary.cloud_name=dwkdclfwe
cloudinary.api_key=856762438891146
cloudinary.api_secret=2gu31Qck01vpWusp2xbwXSZ-zLg

# Configuracin de archivos multipart (para subida de imgenes)
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# ===============================
# CONFIGURACION DE MERCADO PAGO
# ===============================
# Access Token para la API de Mercado Pago. Se recomienda usar una variable de entorno para producción.
# Si la variable de entorno MP_ACCESS_TOKEN_SANDBOX no está definida, usa el valor por defecto para pruebas.
mercadopago.access.token=${MP_ACCESS_TOKEN_SANDBOX:APP_USR-3764841875768102-091116-301ba8b5fa37563f720e765335526f0a-2667144169}

# URL base de tu aplicación para las notificaciones (webhook).
# ¡IMPORTANTE! Esta URL debe ser accesible desde internet (ej. ngrok, un dominio público).
# Si la variable de entorno BASE_URL_DEV no está definida, usa la URL de ngrok por defecto (deberás actualizarla si cambia).
mercadopago.base.url=${BASE_URL_DEV:https://seminocturnal-willena-unbeseeching.ngrok-free.dev}

# ===============================
# URLS FRONTEND PARA REDIRECCIÓN DE MERCADO PAGO
# ===============================
frontend.url.success=http://127.0.0.1:5500/Frontend/html/mercado-pago/success.html
frontend.url.failure=http://127.0.0.1:5500/Frontend/html/mercado-pago/failure.html
frontend.url.pending=http://127.0.0.1:5500/Fronted/html/mercado-pago/pending.html



gemini.api.key=AIzaSyA8pKvo3AeEeAPJFjuKGsjwL8g8iVQF41E
gemini.model=gemini-2.5-flash

# CORS
spring.web.cors.allowed-origins=http://localhost:5500,http://localhost:5173
spring.web.cors.allowed-methods=GET,POST,OPTIONS
spring.web.cors.allowed-headers=*

# Puerto sugerido para desarrollo del chat
server.port=8080
